////////////////////////////////////////////////////////////
//
// GravityComponent.h (Just gravity)
// Created by Dale Sinnott
// 10/01/2019
//
////////////////////////////////////////////////////////////
#ifndef _GRAVITYCOMPONENT_H_
#define _GRAVITYCOMPONENT_H_

////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////
///Frox
#include "Component.h"

///SFML
#include "SFML/Graphics/Transform.hpp"

class GravityComponent : public Component
{
public:
	////////////////////////////////////////////////////////////
	/// Overloaded constructor
	////////////////////////////////////////////////////////////
	GravityComponent() : Component("GravityComponent") {}

	////////////////////////////////////////////////////////////
	/// Destructor (for overriding virtual function in abstract 
	/// base Component)
	////////////////////////////////////////////////////////////
	~GravityComponent() { }

	////////////////////////////////////////////////////////////
	/// Getters/Setters
	////////////////////////////////////////////////////////////
	sf::Vector2f getGravityAsVec() { return sf::Vector2f(0.f, m_gravity); }
	float getGravity() { return m_gravity; }
	void setGravity(float gravity) { m_gravity = gravity; }
	void resetGravity() { m_gravity = GRAVITY; }
private:
	////////////////////////////////////////////////////////////
	/// Member Variables
	////////////////////////////////////////////////////////////
	const float GRAVITY = 9.81f;
	float m_gravity = GRAVITY;
};
#endif;