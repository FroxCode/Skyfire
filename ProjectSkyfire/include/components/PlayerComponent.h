////////////////////////////////////////////////////////////
//
// PlayerComponent.h (Container for player data)
// Created by Dale Sinnott
// 10/01/2019
//
////////////////////////////////////////////////////////////
#ifndef _PLAYERCOMPONENT_H_
#define _PLAYERCOMPONENT_H_

////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////
///Frox
#include "Component.h"


class PlayerComponent : public Component
{
public:
	////////////////////////////////////////////////////////////
	/// Overloaded constructor
	////////////////////////////////////////////////////////////
	PlayerComponent(std::string playerName) : Component("PlayerComponent"),
		m_playerName(playerName) { }

	////////////////////////////////////////////////////////////
	/// Destructor (for overriding virtual function in abstract 
	/// base Component)
	////////////////////////////////////////////////////////////
	~PlayerComponent() { }

	////////////////////////////////////////////////////////////
	/// Getters/Setters
	////////////////////////////////////////////////////////////
	std::string getPlayerName() { return m_playerName; }
	void setPlayerName(std::string playerName) { m_playerName = playerName; }

private:
	////////////////////////////////////////////////////////////
	/// Member Variables
	////////////////////////////////////////////////////////////
	std::string m_playerName;
	/* 
	// Anything could go here, depending on the game.
	// Score, lives, player specific data
	*/

};
#endif;